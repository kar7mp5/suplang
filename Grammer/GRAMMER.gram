# ===== 시작 규칙 & 최상위 구조 =====
file_input: (NEWLINE | statement)* ENDMARKER
statement: stmt_list NEWLINE | compound_stmt
stmt_list: simple_stmt (';' simple_stmt)* [';']

# ===== 단순 구문 =====
simple_stmt: expression_stmt
           | assert_stmt
           | pass_stmt
           | del_stmt
           | return_stmt
           | raise_stmt
           | break_stmt
           | continue_stmt
           | declaration_stmt
           | global_stmt
           | nonlocal_stmt

# ===== Scope 규칙 =====
global_stmt: 'global' NAME (',' NAME)*
nonlocal_stmt: 'nonlocal' NAME (',' NAME)*

# ===== 선언 규칙 =====
declaration_stmt: type_specifier NAME ['=' test]
type_specifier: primitive_type | list_type
primitive_type: 'int8' | 'int16' | 'int32' | 'float' | 'double' | 'char' | 'bool'
list_type: 'list' '<' type_specifier '>'

# ===== 기타 구문 =====
expression_stmt: testlist_star_expr (augassign testlist | ('=' testlist_star_expr)*) | postfix_expression

# 복합 구문
compound_stmt: if_stmt
             | while_stmt
             | for_stmt
             | funcdef
             | classdef
             | struct_stmt

# 블록 정의 (Suite) - 중괄호 사용
suite: '{' NEWLINE? (statement)+ '}'

# 제어 흐름 구문
if_stmt: 'if' '(' test ')' suite ('elif' '(' test ')' suite)* ['else' suite]
while_stmt: 'while' '(' test ')' suite
for_stmt: 'for' '(' [testlist] ';' [test] ';' [testlist] ')' suite

# 함수 및 클래스 정의
funcdef: 'def' NAME parameters ['->' test] suite
classdef: 'class' NAME suite

# 'struct' 구문 정의 (세미콜론으로 종료)
struct_stmt: 'struct' NAME '{' (struct_field)+ '}' ';'
struct_field: NAME ':' test NEWLINE

# 증감 연산자 정의
postfix_expression: primary ('++' | '--')

# ===== 표현식 (Expressions) =====

# test: 삼항 연산자 제거
test: or_test | lambdef
# or_test: 논리 연산자 'or'
or_test: and_test ('or' and_test)*
# and_test: 논리 연산자 'and'
and_test: not_test ('and' not_test)*
# not_test: 논리 연산자 'not'
not_test: 'not' not_test | comparison

# comparison: 비교 연산자 사용
comparison: expr (comp_op expr)*
# comp_op: 비교 연산자 명시
comp_op: '==' | '!=' | '<' | '>' | '<=' | '>='

# expr ~ arith_expr: 비트 연산자 (그대로 유지)
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<' | '>>') arith_expr)*

# arith_expr: 산술 연산자 '+' 와 '-'
arith_expr: term (('+' | '-') term)*
# term: 산술 연산자 '*', '/', '%'
term: factor (('*' | '/' | '%') factor)*
# factor: 단항 연산자
factor: ('+' | '-' | '~') factor | power
# power: 거듭제곱 연산자 '**'
power: primary ['**' factor]

primary: atom | postfix_expression
atom: ('(' [testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' | 'None' | 'true' | 'false')